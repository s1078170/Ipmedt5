
ipmedt5test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  00000526  2**0
                  ALLOC
  3 .stab         00000aa4  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007a9  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  9e:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initGPIO>:
 *      Author: Qui
 */
#include "main.h"

void initGPIO (void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<PB0);//Set Debug led as output
  ae:	a4 e2       	ldi	r26, 0x24	; 36
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e4 e2       	ldi	r30, 0x24	; 36
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	8c 93       	st	X, r24
	DDRD |= (1<<PD3) | (1<<PD5) | (1<<PD6);//Set PWM pins as output
  bc:	aa e2       	ldi	r26, 0x2A	; 42
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	ea e2       	ldi	r30, 0x2A	; 42
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 66       	ori	r24, 0x68	; 104
  c8:	8c 93       	st	X, r24
	DDRD &= ~(1<<PD2);//Set encoder as input
  ca:	aa e2       	ldi	r26, 0x2A	; 42
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e2       	ldi	r30, 0x2A	; 42
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8b 7f       	andi	r24, 0xFB	; 251
  d6:	8c 93       	st	X, r24
	PORTB = 0x00;//Clear PORTB
  d8:	e5 e2       	ldi	r30, 0x25	; 37
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
	PORTD = 0x00;//Clear PORTD
  de:	eb e2       	ldi	r30, 0x2B	; 43
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
}
  e4:	cf 91       	pop	r28
  e6:	df 91       	pop	r29
  e8:	08 95       	ret

000000ea <init>:
unsigned int standaard = 16;
unsigned int snelheid = 0;
char cnt = 0;

void init (void)
{
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	0f 92       	push	r0
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
char i = 0;
  f4:	19 82       	std	Y+1, r1	; 0x01

	initGPIO();
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <initGPIO>
	initPWM();
  fa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <initPWM>

	//Enable encoder interrupt
	EIMSK = (1 << INT0);
  fe:	ed e3       	ldi	r30, 0x3D	; 61
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
	EICRA = 0;
 106:	e9 e6       	ldi	r30, 0x69	; 105
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	EICRA |= ((1 << ISC01));// set INT0 to trigger on falling edge change
 10c:	a9 e6       	ldi	r26, 0x69	; 105
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e9 e6       	ldi	r30, 0x69	; 105
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	82 60       	ori	r24, 0x02	; 2
 118:	8c 93       	st	X, r24

	//Init Timer1 with overflow enable

	//Show init ok
	for(i=0;i<10;i++)
 11a:	19 82       	std	Y+1, r1	; 0x01
 11c:	19 c0       	rjmp	.+50     	; 0x150 <init+0x66>
	{
		PORTB |= (1<<PB0);
 11e:	a5 e2       	ldi	r26, 0x25	; 37
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e5 e2       	ldi	r30, 0x25	; 37
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	8c 93       	st	X, r24
		wait_ms(100);
 12c:	84 e6       	ldi	r24, 0x64	; 100
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		PORTB &= ~(1<<PB0);
 134:	a5 e2       	ldi	r26, 0x25	; 37
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e5 e2       	ldi	r30, 0x25	; 37
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	8c 93       	st	X, r24
		wait_ms(100);
 142:	84 e6       	ldi	r24, 0x64	; 100
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
	EICRA |= ((1 << ISC01));// set INT0 to trigger on falling edge change

	//Init Timer1 with overflow enable

	//Show init ok
	for(i=0;i<10;i++)
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	8a 30       	cpi	r24, 0x0A	; 10
 154:	20 f3       	brcs	.-56     	; 0x11e <init+0x34>
		wait_ms(100);
	}

	//test rgb leds
	//RED ON
	for(i=0;i<255;i++)
 156:	19 82       	std	Y+1, r1	; 0x01
 158:	0b c0       	rjmp	.+22     	; 0x170 <init+0x86>
	{
		writePWM(RED,i);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	69 81       	ldd	r22, Y+1	; 0x01
 15e:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(INTERVALTIME);
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		wait_ms(100);
	}

	//test rgb leds
	//RED ON
	for(i=0;i<255;i++)
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	8f 3f       	cpi	r24, 0xFF	; 255
 174:	91 f7       	brne	.-28     	; 0x15a <init+0x70>
		writePWM(RED,i);
		wait_ms(INTERVALTIME);
	}

	//RED OFF
	for(i=255;i>0;i--)
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	0b c0       	rjmp	.+22     	; 0x192 <init+0xa8>
	{
		writePWM(RED,i);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	69 81       	ldd	r22, Y+1	; 0x01
 180:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(INTERVALTIME);
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		writePWM(RED,i);
		wait_ms(INTERVALTIME);
	}

	//RED OFF
	for(i=255;i>0;i--)
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	88 23       	and	r24, r24
 196:	91 f7       	brne	.-28     	; 0x17c <init+0x92>
		writePWM(RED,i);
		wait_ms(INTERVALTIME);
	}

	//GREEN ON
	for(i=0;i<255;i++)
 198:	19 82       	std	Y+1, r1	; 0x01
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <init+0xc8>
	{
		writePWM(GREEN,i);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	69 81       	ldd	r22, Y+1	; 0x01
 1a0:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(INTERVALTIME);
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		writePWM(RED,i);
		wait_ms(INTERVALTIME);
	}

	//GREEN ON
	for(i=0;i<255;i++)
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	89 83       	std	Y+1, r24	; 0x01
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	8f 3f       	cpi	r24, 0xFF	; 255
 1b6:	91 f7       	brne	.-28     	; 0x19c <init+0xb2>
		writePWM(GREEN,i);
		wait_ms(INTERVALTIME);
	}

	//GREEN OFF
	for(i=255;i>0;i--)
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <init+0xea>
	{
		writePWM(GREEN,i);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	69 81       	ldd	r22, Y+1	; 0x01
 1c2:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(INTERVALTIME);
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		writePWM(GREEN,i);
		wait_ms(INTERVALTIME);
	}

	//GREEN OFF
	for(i=255;i>0;i--)
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	88 23       	and	r24, r24
 1d8:	91 f7       	brne	.-28     	; 0x1be <init+0xd4>
		writePWM(GREEN,i);
		wait_ms(INTERVALTIME);
	}

	//BLUE ON
	for(i=0;i<255;i++)
 1da:	19 82       	std	Y+1, r1	; 0x01
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <init+0x10a>
	{
		writePWM(BLUE,i);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	69 81       	ldd	r22, Y+1	; 0x01
 1e2:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(INTERVALTIME);
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		writePWM(GREEN,i);
		wait_ms(INTERVALTIME);
	}

	//BLUE ON
	for(i=0;i<255;i++)
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	89 83       	std	Y+1, r24	; 0x01
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	8f 3f       	cpi	r24, 0xFF	; 255
 1f8:	91 f7       	brne	.-28     	; 0x1de <init+0xf4>
		writePWM(BLUE,i);
		wait_ms(INTERVALTIME);
	}

	//BLUE OFF
	for(i=255;i>0;i--)
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	89 83       	std	Y+1, r24	; 0x01
 1fe:	0b c0       	rjmp	.+22     	; 0x216 <init+0x12c>
	{
		writePWM(BLUE,i);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	69 81       	ldd	r22, Y+1	; 0x01
 204:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(INTERVALTIME);
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		writePWM(BLUE,i);
		wait_ms(INTERVALTIME);
	}

	//BLUE OFF
	for(i=255;i>0;i--)
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	81 50       	subi	r24, 0x01	; 1
 214:	89 83       	std	Y+1, r24	; 0x01
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	88 23       	and	r24, r24
 21a:	91 f7       	brne	.-28     	; 0x200 <init+0x116>
		wait_ms(INTERVALTIME);
	}

	//Blink green 3 times
	//BLUE OFF
	for(i=0;i<7;i++)
 21c:	19 82       	std	Y+1, r1	; 0x01
 21e:	13 c0       	rjmp	.+38     	; 0x246 <init+0x15c>
	{
		writePWM(GREEN,255);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	6f ef       	ldi	r22, 0xFF	; 255
 224:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(200);
 228:	88 ec       	ldi	r24, 0xC8	; 200
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		writePWM(GREEN,0);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
		wait_ms(200);
 238:	88 ec       	ldi	r24, 0xC8	; 200
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
		wait_ms(INTERVALTIME);
	}

	//Blink green 3 times
	//BLUE OFF
	for(i=0;i<7;i++)
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	87 30       	cpi	r24, 0x07	; 7
 24a:	50 f3       	brcs	.-44     	; 0x220 <init+0x136>
		writePWM(GREEN,255);
		wait_ms(200);
		writePWM(GREEN,0);
		wait_ms(200);
	}
	wait_ms(1000);//Wait 1000ms (1sec)
 24c:	88 ee       	ldi	r24, 0xE8	; 232
 24e:	93 e0       	ldi	r25, 0x03	; 3
 250:	0e 94 96 01 	call	0x32c	; 0x32c <wait_ms>
	//Enable interrupt
	sei();
 254:	78 94       	sei

}
 256:	0f 90       	pop	r0
 258:	cf 91       	pop	r28
 25a:	df 91       	pop	r29
 25c:	08 95       	ret

0000025e <main>:

int main (void)
{
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	0f 92       	push	r0
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
char i = 0;
 268:	19 82       	std	Y+1, r1	; 0x01
	init();
 26a:	0e 94 75 00 	call	0xea	; 0xea <init>
 26e:	ff cf       	rjmp	.-2      	; 0x26e <main+0x10>

00000270 <__vector_1>:

	return 0;
}

ISR(INT0_vect)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
 292:	df 93       	push	r29
 294:	cf 93       	push	r28
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
	if(cnt<255)
 29a:	80 91 06 01 	lds	r24, 0x0106
 29e:	8f 3f       	cpi	r24, 0xFF	; 255
 2a0:	31 f0       	breq	.+12     	; 0x2ae <__vector_1+0x3e>
		cnt+=5;
 2a2:	80 91 06 01 	lds	r24, 0x0106
 2a6:	8b 5f       	subi	r24, 0xFB	; 251
 2a8:	80 93 06 01 	sts	0x0106, r24
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <__vector_1+0x42>
	else
		cnt = 0;
 2ae:	10 92 06 01 	sts	0x0106, r1

	writePWM(BLUE,cnt);
 2b2:	90 91 06 01 	lds	r25, 0x0106
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	69 2f       	mov	r22, r25
 2ba:	0e 94 16 02 	call	0x42c	; 0x42c <writePWM>
	//wait_ms(10);
}
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	bf 91       	pop	r27
 2c8:	af 91       	pop	r26
 2ca:	9f 91       	pop	r25
 2cc:	8f 91       	pop	r24
 2ce:	7f 91       	pop	r23
 2d0:	6f 91       	pop	r22
 2d2:	5f 91       	pop	r21
 2d4:	4f 91       	pop	r20
 2d6:	3f 91       	pop	r19
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <timer1_ovf_vect>:

ISR(timer1_ovf_vect)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	//Toggle DEBUG LED
	PORTB ^= (1<<PB0);
 302:	a5 e2       	ldi	r26, 0x25	; 37
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	e5 e2       	ldi	r30, 0x25	; 37
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	90 81       	ld	r25, Z
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	89 27       	eor	r24, r25
 310:	8c 93       	st	X, r24
}
 312:	cf 91       	pop	r28
 314:	df 91       	pop	r29
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <wait_ms>:

void wait_ms (uint16_t ms)
{
 32c:	df 93       	push	r29
 32e:	cf 93       	push	r28
 330:	00 d0       	rcall	.+0      	; 0x332 <wait_ms+0x6>
 332:	00 d0       	rcall	.+0      	; 0x334 <wait_ms+0x8>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	9c 83       	std	Y+4, r25	; 0x04
 33a:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
 33c:	1a 82       	std	Y+2, r1	; 0x02
 33e:	19 82       	std	Y+1, r1	; 0x01
 340:	13 c0       	rjmp	.+38     	; 0x368 <wait_ms+0x3c>
	for (; ms>0; ms--)
	{
		for (i=0;i<500;i++);
 342:	1a 82       	std	Y+2, r1	; 0x02
 344:	19 82       	std	Y+1, r1	; 0x01
 346:	05 c0       	rjmp	.+10     	; 0x352 <wait_ms+0x26>
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	9a 83       	std	Y+2, r25	; 0x02
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	9a 81       	ldd	r25, Y+2	; 0x02
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	84 3f       	cpi	r24, 0xF4	; 244
 35a:	92 07       	cpc	r25, r18
 35c:	ac f3       	brlt	.-22     	; 0x348 <wait_ms+0x1c>
}

void wait_ms (uint16_t ms)
{
	int i = 0;
	for (; ms>0; ms--)
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	9c 81       	ldd	r25, Y+4	; 0x04
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	9c 83       	std	Y+4, r25	; 0x04
 366:	8b 83       	std	Y+3, r24	; 0x03
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	9c 81       	ldd	r25, Y+4	; 0x04
 36c:	00 97       	sbiw	r24, 0x00	; 0
 36e:	49 f7       	brne	.-46     	; 0x342 <wait_ms+0x16>
	{
		for (i=0;i<500;i++);
	}
}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <wait_us>:

void wait_us (uint16_t ms)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	00 d0       	rcall	.+0      	; 0x384 <wait_us+0x6>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	05 c0       	rjmp	.+10     	; 0x398 <wait_us+0x1a>
	for (; ms>0; ms--);
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	9a 81       	ldd	r25, Y+2	; 0x02
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	9a 83       	std	Y+2, r25	; 0x02
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	9a 81       	ldd	r25, Y+2	; 0x02
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	b9 f7       	brne	.-18     	; 0x38e <wait_us+0x10>
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <initPWM>:
 *      Author: Qui
 */
#include "main.h"

void initPWM (void)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
	//Init timer0 and timer2 to create PWM on PD3,PD5,PD6

	//Timer0
    // set none-inverting mode on PWM A
    TCCR0A |= (1 << COM0A1);
 3b2:	a4 e4       	ldi	r26, 0x44	; 68
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e4 e4       	ldi	r30, 0x44	; 68
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	8c 93       	st	X, r24
    // set none-inverting mode on PWM B
    TCCR0A |= (1 << COM0B1);
 3c0:	a4 e4       	ldi	r26, 0x44	; 68
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e4 e4       	ldi	r30, 0x44	; 68
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 62       	ori	r24, 0x20	; 32
 3cc:	8c 93       	st	X, r24
    // set fast PWM Mode
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
 3ce:	a4 e4       	ldi	r26, 0x44	; 68
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e4 e4       	ldi	r30, 0x44	; 68
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	83 60       	ori	r24, 0x03	; 3
 3da:	8c 93       	st	X, r24
    // set prescaler to 8 and starts PWM
    TCCR0B |= (1 << CS01);
 3dc:	a5 e4       	ldi	r26, 0x45	; 69
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e5 e4       	ldi	r30, 0x45	; 69
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	8c 93       	st	X, r24

    //Timer2
    // set none-inverting mode on PWM B
    TCCR2A |= (1 << COM2B1);
 3ea:	a0 eb       	ldi	r26, 0xB0	; 176
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e0 eb       	ldi	r30, 0xB0	; 176
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	8c 93       	st	X, r24
    // set fast PWM Mode
    TCCR2A |= (1 << WGM21) | (1 << WGM20);
 3f8:	a0 eb       	ldi	r26, 0xB0	; 176
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	e0 eb       	ldi	r30, 0xB0	; 176
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	83 60       	ori	r24, 0x03	; 3
 404:	8c 93       	st	X, r24
    // set prescaler to 8 and starts PWM
    TCCR2B |= (1 << CS21);
 406:	a1 eb       	ldi	r26, 0xB1	; 177
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e1 eb       	ldi	r30, 0xB1	; 177
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	82 60       	ori	r24, 0x02	; 2
 412:	8c 93       	st	X, r24

    //Set all PWM channels off
    OCR0A = 0;	//RED OFF
 414:	e7 e4       	ldi	r30, 0x47	; 71
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	10 82       	st	Z, r1
    OCR0B = 0;	//GREEN OFF
 41a:	e8 e4       	ldi	r30, 0x48	; 72
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	10 82       	st	Z, r1
    OCR2B = 0;	//BLUE OFF
 420:	e4 eb       	ldi	r30, 0xB4	; 180
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	10 82       	st	Z, r1
}
 426:	cf 91       	pop	r28
 428:	df 91       	pop	r29
 42a:	08 95       	ret

0000042c <writePWM>:

void writePWM(char channel, char value)
{
 42c:	df 93       	push	r29
 42e:	cf 93       	push	r28
 430:	00 d0       	rcall	.+0      	; 0x432 <writePWM+0x6>
 432:	00 d0       	rcall	.+0      	; 0x434 <writePWM+0x8>
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	89 83       	std	Y+1, r24	; 0x01
 43a:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel)
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	3c 83       	std	Y+4, r19	; 0x04
 444:	2b 83       	std	Y+3, r18	; 0x03
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	9c 81       	ldd	r25, Y+4	; 0x04
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	91 05       	cpc	r25, r1
 44e:	71 f0       	breq	.+28     	; 0x46c <writePWM+0x40>
 450:	2b 81       	ldd	r18, Y+3	; 0x03
 452:	3c 81       	ldd	r19, Y+4	; 0x04
 454:	22 30       	cpi	r18, 0x02	; 2
 456:	31 05       	cpc	r19, r1
 458:	71 f0       	breq	.+28     	; 0x476 <writePWM+0x4a>
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	9c 81       	ldd	r25, Y+4	; 0x04
 45e:	00 97       	sbiw	r24, 0x00	; 0
 460:	71 f4       	brne	.+28     	; 0x47e <writePWM+0x52>
	{
		case RED:
		{
			//TIMER0 PWMA = RED
			OCR0A = value;
 462:	e7 e4       	ldi	r30, 0x47	; 71
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	8a 81       	ldd	r24, Y+2	; 0x02
 468:	80 83       	st	Z, r24
 46a:	09 c0       	rjmp	.+18     	; 0x47e <writePWM+0x52>
		}

		case GREEN:
		{
			//TIMER0 PWMB = GREEN
			OCR0B = value;
 46c:	e8 e4       	ldi	r30, 0x48	; 72
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	80 83       	st	Z, r24
 474:	04 c0       	rjmp	.+8      	; 0x47e <writePWM+0x52>
		}

		case BLUE:
		{
			//TIMER2 PWMB = BLUE
			OCR2B = value;
 476:	e4 eb       	ldi	r30, 0xB4	; 180
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	8a 81       	ldd	r24, Y+2	; 0x02
 47c:	80 83       	st	Z, r24
			break;
		}
	}

}
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	cf 91       	pop	r28
 488:	df 91       	pop	r29
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
